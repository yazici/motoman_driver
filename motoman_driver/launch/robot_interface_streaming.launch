<launch>

<!-- This launch file provides a socket-based connection to industrial robots
     that implement the standard ROS Industrial simple_message protocol.
     *** Motion control is implemented by STREAMING path data to the robot ***
         (for DOWNLOAD-based path-control, use a different launch file)

     Several nodes are started, to supply both low-level robot communication
     and higher-level actionlib support:
       - robot_state : publishes current joint positions and robot state data
       - motion_streaming_interface : command robot motion by sending motion points to robot
       - joint_trajectory_action : actionlib interface to control robot motion

  Usage:
    robot_interface_streaming.launch robot_ip:=<value> use_bswap:=<true,false>
-->

	<!-- version_0.x: Older client without multi groups-support -->
	<arg name="version_0.x" />
	
	<!-- robot_ip: IP-address of the robot's socket-messaging server -->
	<arg name="robot_ip" />

	<!-- Load the byte-swapping versions of Fanuc nodes if required -->
	<arg name="use_bswap" />

	<!-- copy the specified parameters to the Parameter Server, for 
	     use by nodes below -->
	<param name="robot_ip_address" type="str" value="$(arg robot_ip)" />
	<param name="version_0.x" type="bool" value="$(arg version_0.x)" />

	<!-- robot_state: publishes joint positions and robot-state data
	     (from socket connection to robot)
	-->
	<include file="$(find motoman_driver)/launch/robot_state.launch">
		<arg name="robot_ip"   value="$(arg robot_ip)" />
		<arg name="use_bswap"  value="$(arg use_bswap)" />
		<arg name="version_0.x"  value="$(arg version_0.x)" />
	</include>

	<!-- motion_streaming_interface: sends robot motion commands by 
	     STREAMING path to robot (using socket connection to robot) 
	-->
	<include file="$(find motoman_driver)/launch/motion_streaming_interface.launch">
		<arg name="robot_ip"   value="$(arg robot_ip)" />
		<arg name="use_bswap"  value="$(arg use_bswap)" />
		<arg name="version_0.x"  value="$(arg version_0.x)" />
	</include>

	<!-- joint_trajectory_action: provides actionlib interface for 
	     high-level robot control
	-->
	
	<node if="$(arg version_0.x)" name="joint_trajectory_action"
		pkg="industrial_robot_client" type="joint_trajectory_action" />
	<node unless="$(arg version_0.x)" name="joint_trajectory_action"
		pkg="motoman_driver" type="joint_trajectory_action2" />
</launch>
